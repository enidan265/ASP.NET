@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<h4>Enter city</h4>
<input type="text" @bind="@city" />
<button @onclick="GetWeatherForecast">Search</button>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    var today = DateTime.Today;
    <h4>@city Today: @today.ToShortDateString()</h4>
    <p>Wind @forecasts.Wind</p>
    <p>Temprature @forecasts.Temperature</p>
    <p>Summary: @forecasts.Description</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Wind</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Forecasts)
            {
                <tr>
                    <td>@today.AddDays(int.Parse(forecast.Day)).ToShortDateString()</td>
                    <td>@forecast.Temperature</td>
                    <td>@forecast.Wind</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast? forecasts;

    private string city = "Berlin";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast>(city);
    }

    private async Task GetWeatherForecast()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast>(city);
    }

    public partial class WeatherForecast : Forecast
    {
        public string? Description {get; set; }
        public Forecast[]? Forecasts { get; set; }
    }

    public class Forecast
    {
        public string? Temperature { get; set; }

        public string? Day { get; set; }

        public string? Wind { get; set; }

    }
}
